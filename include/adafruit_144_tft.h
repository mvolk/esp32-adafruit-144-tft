/**
 * ESP-IDF library for the Adafruit 1.44" TFT LCD
 *
 * This library is released under the MIT License.
 *
 * Copyright (c) 2020 Michael Volk
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 * The entirety of this notice (above and below) shall be included in all copies
 * or substantial portions of the Software.
 *
 * This library draws heavily on configuration examples in the
 * [Adafruit-ST7735-Library](Adafruit-ST7735-Library). The license and copyright
 * for that work is reproduced below and must be included in all copies or
 * substantial portions of the Software.
 *
 * This is a library for several Adafruit displays based on ST77* drivers.
 * Works with the Adafruit 1.8" TFT Breakout w/SD card
 *   ----> http://www.adafruit.com/products/358
 * The 1.8" TFT shield
 *   ----> https://www.adafruit.com/product/802
 * The 1.44" TFT breakout
 *   ----> https://www.adafruit.com/product/2088
 * as well as Adafruit raw 1.8" TFT display
 *   ----> http://www.adafruit.com/products/618
 * Check out the links above for our tutorials and wiring diagrams.
 * These displays use SPI to communicate, 4 or 5 pins are required to
 * interface (RST is optional).
 * Adafruit invests time and resources providing this open source code,
 * please support Adafruit and open-source hardware by purchasing
 * products from Adafruit!
 * Written by Limor Fried/Ladyada for Adafruit Industries.
 * MIT license, all text above must be included in any redistribution
 */

#ifndef ADAFRUIT_144_TFT_H
#define ADAFRUIT_144_TFT_H

#include <freertos/FreeRTOS.h>
#include <driver/spi_master.h>
#include <esp_err.h>
#include <st7735r.h>


#define ADAFRUIT_144_TFT_WIDTH 128
#define ADAFRUIT_144_TFT_HEIGHT 128


#ifdef __cplusplus
extern "C" {
#endif


/**
 * @brief Initialize the display
 *
 * Adds the display to the SPI bus,
 * completes initialization of the device
 * descriptor, configures the panel and
 * resets the panel.
 *
 * This method will add the device to the SPI
 * bus with a 6-transaction queue, SPI mode 0,
 * and a 10MHz clock speed. These parameters are
 * set by the esp32-st7735r library, to which
 * this function delegates portions of the
 * initialization process.
 *
 * NOTE 1: This method returns if it succeeds.
 * If it fails, it fails loudly with a log
 * message and reboot.
 *
 * NOTE 2: The SPI Host must be set in the
 * device descriptor before invoking this
 * method. HSPI or VSPI are supported.
 * SPI1 is not recommended.
 *
 * Note 3: GPIO pins must be set in the
 * device descriptor before invoking this
 * method. The rst and bckl ("lite") pins are
 * optional and their absence is gracefully
 * handled.
 *
 * Note 4: The SPI bus itself must already
 * be initialized before calling this
 * method. This library does not configure
 * the bus itself. This library was tested
 * using the following bus config:
 *
 * SPI host: HSPI
 * mosi_io_num: GPIO 12
 * miso_io_num: GPIO 13 (not used by this library)
 * sclk_io_num: GPIO 14
 * quadwp_io_num: -1
 * quadhd_io_num: -1
 * max_transfer_sz: 4096 bytes
 * DMA Channel: 2
 *
 * @param device The ST7735R device to initialize
 */
void adafruit_144_tft_init(
    st7735r_device_handle_t device
);


/**
 * @brief Create a color
 *
 * This method creates 2-byte (16-bit) color codes that
 * correct for the little endianness of the ESP32's
 * memory layout. When read out over SPI from
 * lowest-indexed byte to highest-indexed byte, the bits
 * generated by this method will be in the expected order
 * for RGB/565 encoding. When interpreted by an ESP32
 * as a uint16_t, however, the most and least significant
 * bytes will be inverted.
 *
 * @param red red pixel brightness, 0x07 - 0xFF
 * @param green green pixel brightness, 0x07 - 0xFF
 * @param blue blue pixel brightness, 0x03 - 0xFF
 * @return 16-bit RGB/565 color with inverted byte order
 */
uint16_t adafruit_144_tft_rgb565(
    uint8_t red,
    uint8_t green,
    uint8_t blue
);


/**
 * @brief Set the graphics displayed on the panel
 *
 * This flexible method can be used to update any
 * portion of the display from a single pixel
 * (x0==x1, y0==y1) to the entire display (x0 = 0,
 * y0 = 0, x1 = 127, y1 = 127), SPI settings
 * (max_transfer_sz) permitting.
 *
 * @param device The ST7735R device
 * @param buffer The canvas data, 16 bits per pixel in
 *        big endian byte order, {x0, y0} pixel first,
 *        advancing through an entire column (x) before
 *        moving up to the next row (y). Origin is the
 *        lower left corner.
 * @param x0 X coordinate of the lower-left corner;
 *        must be < 128
 * @param y0 Y coordinate of the lower-left corner
 *        must be < 128
 * @param x1 X coordinate of the upper-right corner;
 *        must be >= x0 and < 128
 * @param y1 Y coordinate of the upper-right corner;
 *        must be >= y0 and < 128
 * @return error code or ESP_OK
 */
esp_err_t adafruit_144_tft_paint(
    st7735r_device_handle_t device,
    uint16_t * buffer,
    uint8_t x0,
    uint8_t y0,
    uint8_t x1,
    uint8_t y1
);


/**
 * @brief Set a single pixel displayed on the panel
 *
 * This method is slightly more optimal than
 * `adafruit_144_tft_paint(...)` for painting single
 * pixels, and is thus better suited to use cases
 * that involve rendering directly to the panel rather
 * than rendering an in-MCU memory canvas and relaying
 * the canvas contents to the panel.
 *
 * @param device The ST7735R device
 * @param color a RGB/565 color code in big endian
 *        byte order (see the _rgb565 function)
 * @param x X coordinate of the pixel, < 127
 * @param y Y coordinate of the pixel, < 128
 * @return error code or ESP_OK
 */
esp_err_t adafruit_144_tft_pixel(
    st7735r_device_handle_t device,
    uint16_t * buffer,
    uint8_t x,
    uint8_t y
);


#ifdef __cplusplus
}
#endif

#endif // ADAFRUIT_144_TFT_H
